# Stays asleep unless 5V is present (via divider). While 5V is present, stays awake.
# When 5V disappears (or at boot with no 5V), do a final refresh and then wait ~30s before deep sleep.
# Uses GPIO36 for ADC and GPIO39 for wake.

esphome:
  name: battery
  friendly_name: Battery
  on_boot:
    priority: -100
    then:
      - light.turn_on: awake_led
      - component.update: adc_pin_v
      - delay: 200ms
      - if:
          condition:
            binary_sensor.is_off: voltage_present
          then:
            - logger.log: "No 5V at boot -> 30s grace, then deep sleep (unless 5V returns)."
            - script.execute: graceful_sleep
          else:
            - logger.log: "5V present at boot -> staying awake."

esp32:
  board: esp32dev
  framework:
    type: esp-idf

logger:

api:
  encryption:
    key: "TSWyewroqBqebbdmrldf+zROi+hH/O0PEWJPUs4Jhew="

ota:
  - platform: esphome
    password: "af02dabd1a628b113fb6ffc6c6a94c17"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Battery Fallback Hotspot"
    password: "BDVDN7O0KT7E"

captive_portal:

# SPI bus for E-Ink display
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23

# NOTE about GPIO15 warning:
# GPIO15 is a strapping pin. Using it as CS can be OK if you don't add external pull-ups/downs.
# If you'd rather avoid the warning, move cs_pin to a safe pin like GPIO5 (and rewire).
# cs_pin: GPIO5   # <- optional change if you rewire

font:
  - file: "fonts/TEMPSITC.TTF"
    id: my_font
    size: 30
  - file: "fonts/GILSANUB.TTF"
    id: GILSANUB
    size: 38
  - file: "fonts/GILSANUB.TTF"
    id: small
    size: 14

image:
  - file: "icons/partly_cloudy.bmp"
    id: icon_partlycloudy
    type: BINARY
    resize: 24x24
    invert_alpha: true
  - file: "icons/House.bmp"
    id: icon_inside
    type: BINARY
    resize: 34x34
    invert_alpha: false
  - file: "icons/Outside.bmp"
    id: icon_tree
    type: BINARY
    resize: 42x42
    invert_alpha: true

sensor:
  # Outside Pressure
  - platform: homeassistant
    id: forecast_pressure
    entity_id: sensor.forcast_pressure

  # Outside Humidity
  - platform: homeassistant
    id: humidity_outside
    entity_id: sensor.indoor_outdoor_meter_0a71_humidity

  # Outdoor Temperature
  - platform: homeassistant
    id: temperature_outside
    entity_id: sensor.indoor_outdoor_meter_0a71_temperature

  # Zach's Office Pressure
  - platform: homeassistant
    id: pressure_printer
    entity_id: sensor.convert_printer_pressure_to_inhg

  # Zach's Office Humidity
  - platform: homeassistant
    id: humidity_printer
    entity_id: sensor.printer_barometer_humidity

  # Zach's Office Temperature
  - platform: homeassistant
    id: temperature_printer
    entity_id: sensor.printer_barometer_temperature

  # --- ADC pin voltage on GPIO36 (after divider) ---
  - platform: adc
    id: adc_pin_v
    name: "ADC Pin Voltage (GPIO36)"
    pin: GPIO36
    attenuation: 12db
    internal: true
    update_interval: 5min     # <- update every 5 minutes
    accuracy_decimals: 2
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 1

  # --- Reconstructed source voltage (pre-divider) ---
  - platform: copy
    source_id: adc_pin_v
    id: source_voltage
    name: "Source Voltage (pre-divider)"
    unit_of_measurement: "V"
    accuracy_decimals: 2
    filters:
      - multiply: 1.8
    on_value:
      then:
        - lambda: |-
            // Hysteresis: ON above 4.0 V, OFF below 3.0 V
            static bool present = false;
            if (!present && x > 4.0) present = true;
            else if (present && x < 3.0) present = false;
            id(voltage_present).publish_state(present);

text_sensor:
  - platform: homeassistant
    id: forecast_condition
    entity_id: weather.forecast_home

time:
  - platform: homeassistant
    id: home_time

binary_sensor:
  # Driven by the on_value lambda above
  - platform: template
    id: voltage_present
    name: "Voltage Present"
    device_class: power
    filters:
      - delayed_on: 100ms
      - delayed_off: 300ms
    # If 5V is lost while we're awake, start 30s grace period
    on_release:
      then:
        - logger.log: "5V lost -> 30s grace, then deep sleep (unless 5V returns)."
        - script.execute: graceful_sleep
output:
  - platform: gpio
    pin: GPIO22
    id: led_pin

light:
  - platform: binary
    name: "Awake LED"
    id: awake_led
    output: led_pin

display:
  - platform: waveshare_epaper
    id: epd
    model: 2.90inv2-r2
    reset_duration: 2ms
    rotation: 90°
    cs_pin: GPIO15
    dc_pin: GPIO17
    busy_pin: GPIO4
    reset_pin: GPIO16
    full_update_every: 5
    update_interval: 10s
    lambda: |-
      // Only update if printer temperature is valid
      if (!isnan(id(temperature_printer).state)) {
        static const int IMAGE_HORIZONTAL = 10;
        static const int TEMP_HORIZONTAL = IMAGE_HORIZONTAL + 40;
        static const int HUMIDITY_HORIZONTAL = TEMP_HORIZONTAL + 110;
        static const int PRESURE_HORIZONTAL = HUMIDITY_HORIZONTAL + 65;
        static const int OUTSIDE_TEMP_VERT = 15;
        static const int OUTSIDE_TEXT_VERT = OUTSIDE_TEMP_VERT + 9;
        static const int INSIDE_TEMP_VERT = OUTSIDE_TEMP_VERT + 53;
        static const int INSIDE_TEXT_VERT = INSIDE_TEMP_VERT + 9;

        it.strftime(5, 2, id(small), TextAlign::TOP_LEFT, "%H:%M:%S", id(home_time).now());
        it.printf(TEMP_HORIZONTAL, OUTSIDE_TEMP_VERT, id(GILSANUB), TextAlign::TOP_LEFT, "%.0f°", id(temperature_outside).state);
        it.printf(HUMIDITY_HORIZONTAL, OUTSIDE_TEXT_VERT, id(my_font), TextAlign::TOP_LEFT, "%.0f%%", id(humidity_outside).state);
        it.printf(PRESURE_HORIZONTAL, OUTSIDE_TEXT_VERT, id(my_font), TextAlign::TOP_LEFT, "%.1f", id(forecast_pressure).state);
        it.printf(HUMIDITY_HORIZONTAL, INSIDE_TEXT_VERT, id(my_font), TextAlign::TOP_LEFT, "%.0f%%", id(humidity_printer).state);
        it.printf(TEMP_HORIZONTAL, INSIDE_TEMP_VERT, id(GILSANUB), TextAlign::TOP_LEFT, "%.0f°", id(temperature_printer).state);
        it.printf(PRESURE_HORIZONTAL, INSIDE_TEXT_VERT, id(my_font), TextAlign::TOP_LEFT, "%.1f", id(pressure_printer).state);

        it.image(IMAGE_HORIZONTAL, INSIDE_TEMP_VERT + 5, id(icon_inside));
        it.image(IMAGE_HORIZONTAL - 3, OUTSIDE_TEMP_VERT + 5, id(icon_tree));
      } else {
        ESP_LOGI("display", "Printer temperature NaN — skipping screen update");
      }

# Graceful sleep script: final refresh, then a cancellable 30s grace window
script:
  - id: graceful_sleep
    mode: restart
    then:
      - logger.log: "Graceful sleep: final refresh, then 30s grace."
      - component.update: adc_pin_v
      - component.update: epd
      - delay: 6s
      - repeat:
          count: 44
          then:
            - if:
                condition:
                  binary_sensor.is_on: voltage_present
                then:
                  - logger.log: "5V returned during grace -> cancel sleep."
                  - script.stop: graceful_sleep
            - component.update: adc_pin_v
            - delay: 1s
      - if:
          condition:
            binary_sensor.is_on: voltage_present
          then:
            - logger.log: "5V is back at end of grace -> staying awake."
          else:
            - logger.log: "Grace elapsed with no 5V -> entering deep sleep."
            - light.turn_off: awake_led
            - deep_sleep.enter: deep_sleep_ctrl

deep_sleep:
  id: deep_sleep_ctrl
  sleep_duration: 30sec           # Wakes when 5V returns
  wakeup_pin: GPIO39              # Separate RTC pin for wake
  wakeup_pin_mode: KEEP_AWAKE     # Do NOT sleep while this pin is HIGH (5V present via divider)

# Poll ADC while awake so we can react fast if 5V disappears/returns
interval:
  - interval: 5s
    then:
      - component.update: adc_pin_v
